package database

import (
	"fmt"
	"log"

	"database/sql"

	"gorm.io/driver/postgres"
	"gorm.io/gorm"

	_ "github.com/lib/pq"
)

func Connect() (*gorm.DB, error) {
	dsn, db_cfg := DSN()

	host     := "localhost"
	port     := 5432
	user     := "postgres"
	password := "postgres"
	targetDB := db_cfg.Name

	// üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î postgres
	systemConnStr := fmt.Sprintf(
		"host=%s port=%d user=%s password=%s dbname=postgres sslmode=disable",
		host, port, user, password)

	db, err := sql.Open("postgres", systemConnStr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer db.Close()

	if err := db.Ping(); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Postgres: %v", err)
	}
	fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Postgres —É—Å–ø–µ—à–Ω–æ!")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω—É–∂–Ω–∞—è –ë–î
	var exists bool
	err = db.QueryRow(`SELECT EXISTS(SELECT datname FROM pg_database WHERE datname = $1)`, targetDB).Scan(&exists)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: %v", err)
	}

	if !exists {
		// –°–æ–∑–¥–∞—ë–º –±–∞–∑—É
		_, err = db.Exec(fmt.Sprintf("CREATE DATABASE %s", targetDB))
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î '%s': %v", targetDB, err)
		}
		fmt.Printf("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n", targetDB)
	} else {
		fmt.Printf("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n", targetDB)
	}

	db_gorm, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %w", err)
	}

	sqlDB, err := db_gorm.DB()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ *sql.DB: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := sqlDB.Ping(); err != nil {
		return nil, fmt.Errorf("–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: %w", err)
	}

	log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostgreSQL")
	return db_gorm, nil

}
